{"ast":null,"code":"var _jsxFileName = \"D:\\\\Redux\\\\Redux_07_Integrate_Redux_in_React_app_react-redux\\\\to-do-app\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport Tasks from './components/Tasks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Tasks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n};\n_c = App;\nexport default App;\n\n// We pass the store as a a props to this task component.   <Tasks store={store} /> \n\n// Imagine we have multiple components and this Task component is deep in the component tree.\n// Then we have to pass this prop in all over the components, and that will be very messy.\n// So to solve this, we can use very useful reat feature, which is \"context\".\n// So with context, we can use this tool in every component which is available in app component.\n\n// What ever component is available in between this provider,\n// that Component and its child components can access this value, which is \"store\".\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Tasks","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Redux/Redux_07_Integrate_Redux_in_React_app_react-redux/to-do-app/frontend/src/App.js"],"sourcesContent":["import React from 'react'\nimport Tasks from './components/Tasks'\n\n\nconst App = () => {\n  return (    \n      <div> <Tasks /> </div>\n  )\n}\n\nexport default App\n\n\n// We pass the store as a a props to this task component.   <Tasks store={store} /> \n\n// Imagine we have multiple components and this Task component is deep in the component tree.\n// Then we have to pass this prop in all over the components, and that will be very messy.\n// So to solve this, we can use very useful reat feature, which is \"context\".\n// So with context, we can use this tool in every component which is available in app component.\n\n// What ever component is available in between this provider,\n// that Component and its child components can access this value, which is \"store\"."],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACID,OAAA;IAAAE,QAAA,GAAK,GAAC,eAAAF,OAAA,CAACF,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE5B,CAAC;AAAAC,EAAA,GAJKN,GAAG;AAMT,eAAeA,GAAG;;AAGlB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}